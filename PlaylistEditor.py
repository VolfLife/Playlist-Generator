import os
import sys
import random
import datetime
import hashlib
import math
import string
import json
import locale
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox
import string
from Localization import Localization
            

class PlaylistEditor:
    def __init__(self, root, file_path):
        self.root = root
        self.localization = Localization()
        self.load_language_settings()
        self.root.title(self.localization.tr("window_title_editor"))
        
        self.file_path = file_path
        self.original_paths = []  # –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        self.full_paths = []      # –¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫
        self.display_names = []
        self.current_seed = ""
        self.current_reverse_step = None
        self.seed_format = self.localization.tr("seed_formats")[0]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        try:
            self.load_playlist()
            self.original_paths = self.full_paths.copy()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            self.create_widgets()
            self.center_window(540, 600)
        except Exception as e:
            messagebox.showerror(
                self.localization.tr("error"),
                self.localization.tr("error_load_playlist").format(error=str(e))
            )
            self.root.destroy()
            raise


    def load_language_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ —Å —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–æ–π"""
        try:
            with open('playlist_settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
                saved_lang = settings.get('language')
                if saved_lang and self.localization.is_language_supported(saved_lang):
                    self.localization.set_language(saved_lang)
                else:
                    sys_lang = self.localization.detect_system_language()
                    self.localization.set_language(sys_lang)
                    # –î–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —Ç.–∫. —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ
                
        except (FileNotFoundError, json.JSONDecodeError):
            sys_lang = self.localization.detect_system_language()
            self.localization.set_language(sys_lang)



    def center_window(self, width, height):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.root.resizable(width=False, height=False)
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width // 2) - (width // 2)
        y = (screen_height // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        self.root.minsize(540, 600)

    def load_playlist(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        temp_files = []
        
        with open(self.file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    if self.file_path.lower().endswith('.txt'):
                        line = line.replace('"', '')    
                    self.full_paths.append(line)
                    self.display_names.append(os.path.basename(line))
                    temp_files.append(line)
                
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∞–º (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        temp_files.sort(key=lambda x: os.path.basename(x).lower())
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        self.full_paths = temp_files
        self.display_names = [os.path.basename(f) for f in temp_files]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        filename = os.path.basename(self.file_path)
        if filename.lower().endswith('.m3u8'):
            filename = filename[:-5]  # –£–¥–∞–ª—è–µ–º .m3u8
        if filename.lower().endswith('.m3u'):
            filename = filename[:-4]  # –£–¥–∞–ª—è–µ–º .m3u
        if filename.lower().endswith('.txt'):
            filename = filename[:-4]  # –£–¥–∞–ª—è–µ–º .txt            
        
        # –£–¥–∞–ª—è–µ–º _mixed –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        if filename.endswith('_mixed'):
            filename = filename[:-6]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
        self.playlist_name = (self.localization.tr("shuffled").format(filename=filename))

    def stable_hash(self, s):
        """–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ hash() —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º hashlib"""
        return int(hashlib.md5(str(s).encode()).hexdigest(), 16) % (10**12)

    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª–∑—É–Ω–∫–æ–º
        table_frame = ttk.Frame(main_frame)
        table_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–∫–æ–≤ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º
        self.tree = ttk.Treeview(table_frame, columns=('num', 'name'), show='headings')
        self.tree.heading('num', text=self.localization.tr("track_number"))
        self.tree.heading('name', text=self.localization.tr("track_name"))
        self.tree.column('num', width=50, anchor='center')
        self.tree.column('name', width=440, anchor='w')
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–ª–∑—É–Ω–æ–∫
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        for i, name in enumerate(self.display_names, 1):
            self.tree.insert('', 'end', values=(i, name))
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_frame = ttk.Frame(main_frame)
        input_frame.pack(fill=tk.X, pady=5)
        
        # –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ (—É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞)
        ttk.Label(input_frame, text=self.localization.tr("playlist_name_label")).grid(row=0, column=0, sticky="w", padx=5, pady=3)
        self.name_entry = ttk.Entry(input_frame, width=45)
        self.name_entry.grid(row=0, column=1, padx=5, pady=3, sticky="ew")
        self.name_entry.insert(0, self.playlist_name)
        
        # –ü–æ–ª–µ —Å–∏–¥–∞ (—É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞)
        ttk.Label(input_frame, text=self.localization.tr("seed_label")).grid(row=1, column=0, sticky="w", padx=5, pady=3)
        self.seed_entry = ttk.Entry(input_frame, width=45)
        self.seed_entry.grid(row=1, column=1, padx=5, pady=3, sticky="ew")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        ttk.Label(input_frame, text=self.localization.tr("reverse_step_label")).grid(
            row=2, column=0, sticky="w", padx=5, pady=3)
        self.step_entry = ttk.Entry(input_frame, width=5)
        self.step_entry.insert(0, "")
        self.step_entry.grid(row=2, column=1, padx=5, pady=3, sticky="w")
        
        ttk.Label(input_frame, text=self.localization.tr("seed_format_label")).grid(
            row=3, column=0, sticky="w", padx=5, pady=3)
        self.seed_format_combobox = ttk.Combobox(
            input_frame, 
            values=self.localization.tr("seed_formats"), 
            state="readonly",
            width=18
        )
        self.seed_format_combobox.current(0)
        self.seed_format_combobox.grid(row=3, column=1, padx=5, pady=3, sticky="w")
        self.seed_format_combobox.bind("<<ComboboxSelected>>", self.update_seed_format)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=(10, 15))
        
        ttk.Button(btn_frame, text=self.localization.tr("shuffle_button"), command=self.shuffle_tracks).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text=self.localization.tr("save_button"), command=self.save_playlist).pack(side=tk.LEFT)
        
        # –ü–æ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.seed_info = tk.Label(main_frame, text="", fg="red")
        self.seed_info.pack(pady=(5, 0))
        
        
        # –§—Ä–µ–π–º –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(btn_frame)
        control_frame.pack(side=tk.RIGHT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.move_up_btn = ttk.Button(control_frame, text="‚ñ≤", width=3, 
                                    command=self.move_up)
        self.move_up_btn.pack(side=tk.LEFT, padx=2)
        
        self.move_down_btn = ttk.Button(control_frame, text="‚ñº", width=3,
                                      command=self.move_down)
        self.move_down_btn.pack(side=tk.LEFT, padx=2)
        
        self.delete_btn = ttk.Button(control_frame, text="üû≠", width=3,
                                   command=self.delete_tracks)
        self.delete_btn.pack(side=tk.LEFT, padx=2)
        
        self.undo_btn = ttk.Button(control_frame, text="ü°Ñ", width=3,
                                 command=self.undo_action)
        self.undo_btn.pack(side=tk.LEFT, padx=2)
        
        self.redo_btn = ttk.Button(control_frame, text="ü°Ü", width=3,
                             command=self.redo_action, state='disabled')
        self.redo_btn.pack(side=tk.LEFT, padx=2)
    
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è Redo
        self.redo_stack = []
        
        # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
        self.history = []
        self.future = []  # –î–ª—è redo (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
        self.manual_edit = False  # –§–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    
    def move_up(self):
        selected = self.tree.selection()
        if not selected:
            self.show_message(self.localization.tr("error_no_selection"), "red")
            return
        
        positions = [int(self.tree.index(item)) for item in selected]
        if min(positions) == 0:
            return
        
        self.save_state()  # –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏
        
        for item in selected:
            index = self.tree.index(item)
            self.tree.move(item, '', index-1)
        
        self.manual_edit = True
        self.update_undo_redo_buttons()  # –Ø–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        self.update_track_lists()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        self.show_message(self.localization.tr("moved_up"), "green")

    def move_down(self):
        selected = self.tree.selection()
        if not selected:
            self.show_message(self.localization.tr("error_no_selection"), "red")
            return
        
        positions = [int(self.tree.index(item)) for item in selected]
        if max(positions) == len(self.tree.get_children())-1:
            return
        
        self.save_state()  # –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏
        
        for item in reversed(selected):
            index = self.tree.index(item)
            self.tree.move(item, '', index+1)
        
        self.manual_edit = True
        self.update_undo_redo_buttons()  # –Ø–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        self.update_track_lists()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        self.show_message(self.localization.tr("moved_down"), "green")

    def delete_tracks(self):
        selected = self.tree.selection()
        if not selected:
            self.show_message(self.localization.tr("error_no_selection"), "red")
            return
        
        self.save_state()  # –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏
        
        for item in selected:
            self.tree.delete(item)
        
        self.manual_edit = True
        self.update_undo_redo_buttons()  # –Ø–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        self.update_track_lists()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        self.show_message(
            self.localization.tr("deleted_tracks").format(count=len(selected)), 
            "green"
        )

    def undo_action(self):
        if not self.history:
            self.show_message(self.localization.tr("nothing_to_undo"), "red")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ redo stack
        self.redo_stack.append(self.get_current_state())
        
        
      
        state = self.history.pop()
        self.restore_state(state)
        
        self.manual_edit = True
        self.update_undo_redo_buttons()
        self.update_track_lists()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        self.show_message(self.localization.tr("action_undone"), "green")
        
        
    def redo_action(self):
        """–ü–æ–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if not self.redo_stack:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ undo history
        self.history.append(self.get_current_state())
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ redo stack
        state = self.redo_stack.pop()
        self.restore_state(state)
        
        self.manual_edit = True
        self.update_undo_redo_buttons()
        self.show_message(self.localization.tr("action_redone"), "green")
    
    def update_undo_redo_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ Undo/Redo"""
        self.undo_btn['state'] = 'normal' if self.history else 'disabled'
        self.redo_btn['state'] = 'normal' if self.redo_stack else 'disabled'
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Undo/Redo"""
        current_state = self.get_current_state()
        if hasattr(self, 'history') and self.history and self.history[-1] == current_state:
            return
        
        if hasattr(self, 'history'):
            self.history.append(current_state)
            # –û—á–∏—â–∞–µ–º redo stack –ø—Ä–∏ –Ω–æ–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
            self.redo_stack = []
            self.update_undo_redo_buttons()
        else:
            self.history = [current_state]

    def get_current_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        return [(self.tree.item(item)['values'], item) 
                for item in self.tree.get_children()]

    def restore_state(self, state):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.tree.delete(*self.tree.get_children())
        for values, item in state:
            self.tree.insert('', 'end', values=values, iid=item)

    def show_message(self, text, color):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.seed_info.config(text=text, fg=color)    
        
        
        
        
    def update_seed_format(self, event=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–¥–∞"""
        self.seed_format = self.seed_format_combobox.get()

    def generate_seed(self, num_tracks, date, length=None):
        """–ü–æ–ª–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ PlaylistGenerator.py"""
        date_part = date.strftime("%Y%m%d%H%M%S")
        random_part = random.getrandbits(64)
    
        # –†–∞—Å—á–µ—Ç –¥–ª–∏–Ω—ã —Å–∏–¥–∞
        base_length = math.ceil(math.log2(num_tracks + 1))
        seed_length = min(max(1, base_length), base_length)
    
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞
        entropy = f"{num_tracks}{date.timestamp()}{random_part}"
        hash_str = hashlib.sha512(entropy.encode()).hexdigest()
    
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        format_type = self.seed_format_combobox.get()
        if format_type in ["–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã", "Digits only", "Solo d√≠gitos", "Nur Zahlen", "Solo numeri", "Tylko cyfry", "–¢–æ–ª—å–∫—ñ –ª—ñ—á–±—ã",
                    "–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏", "–¢–µ–∫ —Å–∞–Ω–¥–∞—Ä", "–°–∞–º–æ –±—Ä–æ—ò–µ–≤–∏", "Chiffres uniquement", "Chiffres uniquement", "S√≥lo n√∫meros", "Apenas n√∫meros", 
                    "Sadece rakamlar", "Apenas d√≠gitos", "Alleen cijfers", "‰ªÖÊï∞Â≠ó", "Ïà´ÏûêÎßå"]:
            return ''.join(c for c in hash_str if c.isdigit())[:seed_length]
        return hash_str[:seed_length]


    def apply_reverse_step(self, files, step):
        """–†–µ–≤–µ—Ä—Å –±–ª–æ–∫–æ–≤ (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É)"""
        reversed_files = files.copy()
        for i in range(0, len(reversed_files), step):
            reversed_files[i:i+step] = reversed(reversed_files[i:i+step])
        return reversed_files


    def shuffle_tracks(self):
        """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Å–∏–¥–∞"""
        try:
            user_seed = self.seed_entry.get()
            step_value = self.step_entry.get()
            num_tracks = len(self.original_paths)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            now = datetime.datetime.now()
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
            if not hasattr(self, 'original_paths') or not self.original_paths:
                self.original_paths = self.full_paths.copy()
        
            # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–¥–∞
            if not user_seed or user_seed == "0":
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–∫–æ–≤           
                seed_length = min(max(1, num_tracks), num_tracks)
                seed = self.generate_seed(num_tracks=num_tracks, date=now, length=seed_length)
                
                self.seed_entry.delete(0, tk.END)
            else:
                seed = user_seed
            
            # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ —Ä–µ–≤–µ—Ä—Å–∞
            step = 0
            if step_value.strip():
                try:
                    step = int(step_value)
                    if step < 0 or step > 20:
                        raise ValueError(self.localization.tr("error_reverse_step"))
                except ValueError as e:
                    self.seed_info.config(text=f"{self.localization.tr('error_reverse_step')}", fg="red")
                    return
            
            # 3. –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            files_to_shuffle = self.original_paths.copy()
            
            # 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
            random.seed(abs(self.stable_hash(str(seed))))
            shuffled = files_to_shuffle.copy()
            random.shuffle(shuffled)
            
            # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–≤–µ—Ä—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            reverse_step = None
            if step > 0:
                reverse_step = step
                shuffled = self.apply_reverse_step(shuffled, reverse_step)
                info_text = self.localization.tr("seed_info_step").format(seed=seed, step=reverse_step)
            else:
                info_text = self.localization.tr("seed_info_basic").format(seed=seed)
            
            # 6. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.manual_edit = False
            self.current_seed = seed
            self.current_reverse_step = reverse_step if step > 0 else None
            self.full_paths = shuffled
            self.display_names = [os.path.basename(f) for f in shuffled]
            
            self.update_table()
            self.seed_info.config(text=info_text, fg="green")
            
        except Exception as e:
            self.seed_info.config(text=f"{self.localization.tr('error')}: {str(e)}", fg="red")


    def shuffle_files(self, files_list, seed_value):
        """–ü–æ–ª–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ PlaylistGenerator.py"""
        random.seed(abs(self.stable_hash(seed_value)))
        shuffled = files_list.copy()
        random.shuffle(shuffled)
        return shuffled

    def update_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç—Ä–µ–∫–∞–º–∏"""
        self.tree.delete(*self.tree.get_children())
        for i, name in enumerate(self.display_names, 1):
            self.tree.insert('', 'end', values=(i, name))

    def save_playlist(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–¥–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–∫–∏ –∏–∑ Treeview
            current_tracks = []
            for item in self.tree.get_children():
                values = self.tree.item(item)['values']
                if len(values) >= 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    current_tracks.append(values[1])  # values[1] - —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        
            if not current_tracks:
                raise ValueError(self.localization.tr("error_no_tracks"))
               
               
            script_dir = os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) \
                        else os.path.dirname(os.path.abspath(__file__))
            
            playlist_name = self.name_entry.get().strip()
            if not playlist_name:
                raise ValueError(self.localization.tr("error_no_playlist_name"))
            
            save_path = os.path.join(script_dir, f"{playlist_name}.m3u8")
            
            with open(save_path, 'w', encoding='utf-8') as f:
                f.write("#EXTM3U\n")
                f.write("#Created by VolfLife's Playlist Generator\n")
                f.write(f"#GENERATED:{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"#PLAYLIST:{playlist_name}\n")
                
                # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–¥, –µ—Å–ª–∏ –±—ã–ª–æ —Ä—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                if not self.manual_edit and hasattr(self, 'current_seed') and self.current_seed:
                    f.write(f"#SEED:{self.current_seed}\n")
                if not self.manual_edit and hasattr(self, 'current_reverse_step') and self.current_reverse_step:
                    f.write(f"#REVERSE_STEP:{self.current_reverse_step}\n")
                
                f.write(f"#TRACKS:{len(self.full_paths)}\n\n")
                
                for path in self.full_paths:
                    f.write(f"#EXTINF:-1,{os.path.basename(path)}\n")
                    f.write(f"{os.path.normpath(path)}\n")
            
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
            self.full_paths = current_tracks
            self.display_names = [os.path.basename(path) for path in current_tracks]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.localization.tr("playlist_saved").format(name=f"{playlist_name}.m3u8")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–¥–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not self.manual_edit:
                if hasattr(self, 'current_seed') and self.current_seed:
                    message += f" | {self.localization.tr('seed_info_value')}: {self.current_seed}"
                    if hasattr(self, 'current_reverse_step') and self.current_reverse_step:
                        message += f" | {self.localization.tr('reverse_info_value')}: {self.current_reverse_step}"
            
            self.seed_info.config(text=message, fg="green")
            
        except Exception as e:
            self.seed_info.config(
                text=f"{self.localization.tr('error_save')}: {str(e)}", 
                fg="red"
            )
    
    def update_track_lists(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ø–∏—Å–∫–∏ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Treeview"""
        self.full_paths = []
        self.display_names = []
        for item in self.tree.get_children():
            values = self.tree.item(item)['values']
            if len(values) >= 2:
                self.full_paths.append(values[1])
                self.display_names.append(values[0])  # –ò–º—è —Ç—Ä–µ–∫–∞
                